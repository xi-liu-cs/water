#pragma kernel Density
#include "noise.compute"

struct particle
{
    float3 position;
    float4 color;
};

static const int numThreads = 8;

StructuredBuffer<float3> offsets;
int n_point_per_axis;
float boundsSize;
float3 center;
float3 offset;
float spacing;
float3 worldSize;
// Noise settings
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
bool closeEdges;
float hardFloor;
float hardFloorWeight;
RWStructuredBuffer<particle> particles;
RWStructuredBuffer<float> voxel_density;

float4 params;

int indexFromCoord(uint x, uint y, uint z) {
    return z * n_point_per_axis * n_point_per_axis + y * n_point_per_axis + x;
}

[numthreads(numThreads,numThreads,numThreads)]
void Density (int3 id : SV_DispatchThreadID)
{
    int index = indexFromCoord(id.x,id.y,id.z);
    if (id.x >= n_point_per_axis || id.y >= n_point_per_axis || id.z >= n_point_per_axis)
        return;

    float3 pos = particles[index].position;
    float offsetNoise = 0;

    float noise = 0;

    float frequency = noiseScale/100;
    float amplitude = 1;
    float weight = 1;
    for (int j =0; j < octaves; j ++) {
        float n = snoise((pos+offsetNoise) * frequency + offsets[j] + offset);
        float v = 1-abs(n);
        v = v*v;
        v *= weight;
        weight = max(min(v*weightMultiplier,1),0);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    float finalVal = -(pos.y + floorOffset) + noise * noiseWeight + (pos.y%params.x) * params.y;

    if (pos.y < hardFloor) {
        finalVal += hardFloorWeight;
    }

    if (closeEdges) {
        float3 edgeOffset = abs(pos*2)-worldSize + spacing/2;
        float edgeWeight = saturate(sign(max(max(edgeOffset.x,edgeOffset.y),edgeOffset.z)));
        finalVal = finalVal * (1-edgeWeight) - 100 * edgeWeight;
        
    }

    voxel_density[index] = finalVal;
}